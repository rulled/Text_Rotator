import time
from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QListWidget, QApplication, 
                             QListWidgetItem, QGraphicsDropShadowEffect) # Removed QPushButton, QInputDialog
from PyQt5.QtCore import Qt, QPoint, QEvent, QPropertyAnimation, QEasingCurve, QRect # –î–æ–±–∞–≤–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
from PyQt5.QtGui import QCursor, QColor # –î–æ–±–∞–≤–∏–ª–∏ QColor –¥–ª—è —Ç–µ–Ω–∏

import sys
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Windows API –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–∫–Ω–∞ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –ø–ª–∞–Ω–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–∏—Å—Ç–µ–º—ã
if sys.platform == "win32":
    try:
        import ctypes
        # from ctypes import wintypes # wintypes –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å
    except ImportError:
        ctypes = None
else:
    ctypes = None

class TextSelectionPopup(QDialog):
    def __init__(self, data, callback, parent=None):
        super(TextSelectionPopup, self).__init__(parent, 
            Qt.WindowType.FramelessWindowHint | 
            Qt.WindowType.Tool |
            Qt.WindowType.WindowStaysOnTopHint)
        
        self.setAttribute(Qt.WA_TranslucentBackground) # –í–∞–∂–Ω–æ –¥–ª—è —Ç–µ–Ω–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        self.setAttribute(Qt.WA_DeleteOnClose)
        
        self.data = data
        self.callback = callback
        self.is_dark_theme = self.detect_dark_theme()
        self.folder_stack = []
        
        self.init_ui()
        self.init_animations() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
        self.apply_shadow()    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–Ω—å

    def detect_dark_theme(self):
        if hasattr(self.parent(), "is_dark_theme"):
            return self.parent().is_dark_theme
        else:
            try:
                if sys.platform == "win32":
                    import winreg
                    registry = winreg.ConnectRegistry(None, winreg.HKEY_CURRENT_USER)
                    reg_key = winreg.OpenKey(registry, r"Software\Microsoft\Windows\CurrentVersion\Themes\Personalize")
                    is_light_theme = int(winreg.QueryValueEx(reg_key, "AppsUseLightTheme")[0])
                    return is_light_theme == 0
                return False
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º—ã –¥–ª—è popup: {e}")
                return False
        
    def init_ui(self):
        self.setWindowTitle('Select Text')
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥–∂–µ—Ç-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è —Å—Ç–∏–ª–∏ (—Ñ–æ–Ω, –≥—Ä–∞–Ω–∏—Ü–∞)
        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Ç–µ–Ω–∏ –±—ã—Ç—å –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –≤–∏–¥–∏–º–æ–π —á–∞—Å—Ç–∏ –æ–∫–Ω–∞.
        self.container_widget = QListWidget() # –ò—Å–ø–æ–ª—å–∑—É–µ–º QListWidget –∫–∞–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.container_widget.setObjectName("popupContainer") # –î–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
        border_radius_val = "8px" # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–º —Ä–∞–¥–∏—É—Å
        border_color_light = "rgba(0, 0, 0, 0.1)" # –û—á–µ–Ω—å —Å–≤–µ—Ç–ª–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
        border_color_dark = "rgba(255, 255, 255, 0.1)" # –û—á–µ–Ω—å —Å–≤–µ—Ç–ª–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã

        # –û–±—â–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è QListWidget (–æ–Ω –∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
        container_style_sheet = f"""
            QListWidget#popupContainer {{
                border: 1px solid {border_color_dark if self.is_dark_theme else border_color_light};
                border-radius: {border_radius_val};
                font-family: 'Inter', 'San Francisco', sans-serif; /* –î–æ–±–∞–≤–∏–º San Francisco –∫–∞–∫ fallback */
                font-size: 14px;
                font-weight: 400;
                padding: 5px; /* –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ */
                background-color: {"#2C2C2E" if self.is_dark_theme else "#F2F2F7"}; /* –¢–∏–ø–∏—á–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ Apple */
                color: {"#FFFFFF" if self.is_dark_theme else "#000000"};
            }}
            QListWidget#popupContainer::item {{
                padding: 10px 8px; /* –£–≤–µ–ª–∏—á–∏–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π padding */
                border-bottom: 1px solid {"#3A3A3C" if self.is_dark_theme else "#E5E5EA"}; /* –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ */
            }}
            QListWidget#popupContainer::item:last-child {{
                border-bottom: none; /* –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ */
            }}
            QListWidget#popupContainer::item:selected {{
                background-color: {"#3A3A3C" if self.is_dark_theme else "#E5E5EA"}; /* –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π —Ü–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è */
                color: {"#FFFFFF" if self.is_dark_theme else "#000000"};
                border-radius: 4px; /* –ù–µ–±–æ–ª—å—à–æ–µ —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ */
            }}
            QListWidget#popupContainer::item:hover {{
                background-color: {"#48484A" if self.is_dark_theme else "#DADADE"};
                border-radius: 4px;
            }}
            QListWidget#popupContainer::item[type="folder"] {{ /* –≠—Ç–æ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é, –ª—É—á—à–µ —á–µ—Ä–µ–∑ setData */
                font-weight: 500;
                color: {"#0A84FF" if not self.is_dark_theme else "#0A84FF"}; /* Apple Blue */
            }}
             QScrollBar:vertical {{
                 border: none;
                 background: transparent; 
                 width: 8px;
                 margin: 0px 0px 0px 0px;
             }}
             QScrollBar::handle:vertical {{
                 background: {"#555555" if self.is_dark_theme else "#CCCCCC"};
                 min-height: 25px;
                 border-radius: 4px;
             }}
             QScrollBar::handle:vertical:hover {{
                 background: {"#666666" if self.is_dark_theme else "#BBBBBB"};
             }}
             QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical,
             QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical,
             QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{
                 border: none; background: none; height: 0px; width: 0px;
             }}
        """
        self.container_widget.setStyleSheet(container_style_sheet)
        
        layout = QVBoxLayout(self) # –ì–ª–∞–≤–Ω—ã–π layout —Å–∞–º–æ–≥–æ QDialog
        layout.setContentsMargins(10, 10, 10, 10) # –û—Ç—Å—Ç—É–ø—ã –¥–ª—è —Ç–µ–Ω–∏!
        layout.addWidget(self.container_widget)
        
        self.text_list = self.container_widget # –¢–µ–ø–µ—Ä—å self.text_list —ç—Ç–æ –Ω–∞—à –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.update_text_list() # –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç self.text_list.clear() –∏ —Ç.–¥.
        self.text_list.itemClicked.connect(self.on_text_selected)
        
        self.text_list.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.text_list.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        
        self.adjust_popup_size()

    def init_animations(self):
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        self.opacity_anim = QPropertyAnimation(self, b"windowOpacity")
        self.opacity_anim.setDuration(150) # –ë—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        self.opacity_anim.setEasingCurve(QEasingCurve.OutCubic)

        # –ê–Ω–∏–º–∞—Ü–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ "pop"
        self.geometry_anim = QPropertyAnimation(self, b"geometry")
        self.geometry_anim.setDuration(180) # –ß—É—Ç—å –¥–æ–ª—å—à–µ –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ "pop"
        self.geometry_anim.setEasingCurve(QEasingCurve.OutCubic)

    def apply_shadow(self):
        self.shadow = QGraphicsDropShadowEffect(self)
        self.shadow.setBlurRadius(15) # –†–∞–¥–∏—É—Å —Ä–∞–∑–º—ã—Ç–∏—è
        self.shadow.setXOffset(0)     # –°–º–µ—â–µ–Ω–∏–µ –ø–æ X
        self.shadow.setYOffset(2)     # –ù–µ–±–æ–ª—å—à–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –ø–æ Y –¥–ª—è –æ—â—É—â–µ–Ω–∏—è "–ø—Ä–∏–ø–æ–¥–Ω—è—Ç–æ—Å—Ç–∏"
        shadow_color_alpha = 70 if self.is_dark_theme else 50 # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ç–µ–Ω–∏
        self.shadow.setColor(QColor(0, 0, 0, shadow_color_alpha)) 
        self.setGraphicsEffect(self.shadow)
        
    def update_text_list(self):
        self.text_list.clear()
        # current_items_data = [] # Not strictly needed here anymore

        if not self.folder_stack: # –ú—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–º —É—Ä–æ–≤–Ω–µ
            # –í –∫–æ—Ä–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫–∏
            for item_data_obj in self.data: # self.data —ç—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ TextRotator (data_popup)
                if isinstance(item_data_obj, dict) and item_data_obj.get('type') == 'folder':
                    folder_name = item_data_obj.get('name', '–ë–µ–∑—ã–º—è–Ω–Ω–∞—è –ø–∞–ø–∫–∞')
                    list_item = QListWidgetItem(f"üìÅ {folder_name}")
                    list_item.setData(Qt.UserRole, None) # –î–ª—è –ø–∞–ø–æ–∫ —Å–∞–º —Ç–µ–∫—Å—Ç –Ω–µ –Ω—É–∂–µ–Ω
                    list_item.setData(Qt.UserRole + 1, 'folder') # –¢–∏–ø
                    list_item.setData(Qt.UserRole + 2, item_data_obj) # –°–∞–º –æ–±—ä–µ–∫—Ç –ø–∞–ø–∫–∏
                    self.text_list.addItem(list_item)
        else: # –ú—ã –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏
            back_item = QListWidgetItem("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–∞–ø–æ–∫")
            back_item.setData(Qt.UserRole, None)
            back_item.setData(Qt.UserRole + 1, 'back')
            self.text_list.addItem(back_item)
            
            current_folder_obj = self.folder_stack[-1]
            current_items_data = current_folder_obj.get('items', [])
            # –í–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for item_data_obj in current_items_data:
                if isinstance(item_data_obj, str): # –≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                    preview = item_data_obj.replace('\n', ' ')
                    preview = preview[:50] + '...' if len(preview) > 50 else preview
                    list_item = QListWidgetItem(preview)
                    list_item.setData(Qt.UserRole, item_data_obj) # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                    list_item.setData(Qt.UserRole + 1, 'text') # –¢–∏–ø
                    self.text_list.addItem(list_item)
        
        self.adjust_popup_size()

    def adjust_popup_size(self):
        screen = QApplication.primaryScreen()
        screen_height = screen.availableGeometry().height() # –ò—Å–ø–æ–ª—å–∑—É–µ–º availableGeometry
        
        min_items_visible = 3
        max_items_visible = 10 # –ú–∞–∫—Å–∏–º—É–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ)

        # –û—Ü–µ–Ω–∫–∞ –≤—ã—Å–æ—Ç—ã –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–≤–∫–ª—é—á–∞—è padding)
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –±–µ—Ä–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        item_height_estimate = 40 # (10px padding-top + 10px padding-bottom + ~20px text)
        if self.text_list.count() > 0:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                # sizeHintForRow –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω–æ–π –±–µ–∑ –¥–µ–ª–µ–≥–∞—Ç–∞, –Ω–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–æ–π–¥–µ—Ç
                hint = self.text_list.sizeHintForRow(0) 
                if hint > 0 : item_height_estimate = hint + 2 # +2 –¥–ª—è border
            except Exception:
                pass # –ò—Å–ø–æ–ª—å–∑—É–µ–º estimate

        num_items = self.text_list.count()
        
        # –í—ã—Å–æ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–ø–∏—Å–∫–∞
        content_height = item_height_estimate * num_items
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã —Å–∞–º–æ–≥–æ QListWidget (–∏–∑ CSS padding: 5px)
        list_widget_vertical_padding = 5 * 2 
        
        # –ò–¥–µ–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è QListWidget
        ideal_list_height = content_height + list_widget_vertical_padding
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å–ø–∏—Å–∫–∞
        min_h = item_height_estimate * min_items_visible + list_widget_vertical_padding
        max_h = min(screen_height * 0.6, item_height_estimate * max_items_visible + list_widget_vertical_padding) # –ù–µ –±–æ–ª–µ–µ 60% —ç–∫—Ä–∞–Ω–∞
        
        target_list_height = max(min_h, min(ideal_list_height, max_h))
        
        self.text_list.setMinimumHeight(int(target_list_height))
        self.text_list.setMaximumHeight(int(target_list_height))
        # self.text_list.setFixedHeight(int(target_list_height)) # –ú–æ–∂–Ω–æ –∏ —Ç–∞–∫

        # –û—Ç—Å—Ç—É–ø—ã —Å–∞–º–æ–≥–æ QDialog (–≥–¥–µ –ª–µ–∂–∏—Ç —Ç–µ–Ω—å)
        dialog_margins = self.layout().contentsMargins()
        dialog_vertical_margins = dialog_margins.top() + dialog_margins.bottom()
        
        total_height = int(target_list_height + dialog_vertical_margins)
        current_width = self.width() if self.width() > 100 else 400 # –û—Å—Ç–∞–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—Å–µ–≥–æ QDialog
        self.setFixedSize(current_width, total_height)
        print(f"Adjusted popup size: {num_items} items. ItemH_est: {item_height_estimate}. ListH: {target_list_height}. TotalH: {total_height}")

    def on_text_selected(self, item):
        item_type = item.data(Qt.UserRole + 1)
        if item_type == 'folder':
            folder_obj = item.data(Qt.UserRole + 2)
            self.folder_stack.append(folder_obj)
            self.update_text_list()
        elif item_type == 'back':
            if self.folder_stack:
                self.folder_stack.pop()
                self.update_text_list()
        elif item_type == 'text' and item.data(Qt.UserRole) is not None:
            selected_text = item.data(Qt.UserRole)
            self.close_with_animation(selected_text) # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        
    def show_at_cursor(self):
        print("TextSelectionPopup.show_at_cursor() called")
        cursor_pos = QCursor.pos()
        
        screens = QApplication.screens()
        target_screen = QApplication.screenAt(cursor_pos) if QApplication.screenAt(cursor_pos) else QApplication.primaryScreen()
        screen_geometry = target_screen.availableGeometry() # –ò—Å–ø–æ–ª—å–∑—É–µ–º availableGeometry
        
        # self.adjust_popup_size() # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–∞–∑–º–µ—Ä –∞–∫—Ç—É–∞–ª–µ–Ω –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–æ–º –ø–æ–∑–∏—Ü–∏–∏

        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ (—á—É—Ç—å –Ω–∏–∂–µ –∏ –º–µ–Ω—å—à–µ)
        # –í–∞–∂–Ω–æ: self.width() –∏ self.height() —Ç—É—Ç —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ (–ø–æ—Å–ª–µ adjust_popup_size)
        final_width = self.width()
        final_height = self.height()

        offset_x, offset_y = 10, 10
        
        x = cursor_pos.x() + offset_x
        y = cursor_pos.y() + offset_y
        
        if x + final_width > screen_geometry.right():
            x = screen_geometry.right() - final_width
        if y + final_height > screen_geometry.bottom():
            y = screen_geometry.bottom() - final_height
        if x < screen_geometry.left():
            x = screen_geometry.left()
        if y < screen_geometry.top():
            y = screen_geometry.top()

        final_rect = QRect(x, y, final_width, final_height)

        # –ù–∞—á–∞–ª—å–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è –¥–ª—è "pop" –∞–Ω–∏–º–∞—Ü–∏–∏
        # –ü–æ—è–≤–∏—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ –∏ "–≤—ã—Ä–∞—Å—Ç–µ—Ç" –≤–≤–µ—Ä—Ö
        pop_offset_y = 15 
        start_rect = QRect(x, y + pop_offset_y, final_width, final_height - pop_offset_y)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.setGeometry(start_rect)
        self.setWindowOpacity(0.0)

        super(TextSelectionPopup, self).show() # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ (–æ–Ω–æ –±—É–¥–µ—Ç –Ω–µ–≤–∏–¥–∏–º—ã–º –∏ –≤ start_rect)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
        self.opacity_anim.setStartValue(0.0)
        self.opacity_anim.setEndValue(1.0)
        self.opacity_anim.start()

        self.geometry_anim.setStartValue(start_rect)
        self.geometry_anim.setEndValue(final_rect)
        self.geometry_anim.start()
        
        self.activateWindow()
        self.raise_()
        
        if ctypes and sys.platform == "win32":
            try:
                HWND_TOPMOST = -1
                SWP_NOSIZE = 0x0001
                SWP_NOMOVE = 0x0002
                SWP_SHOWWINDOW = 0x0040
                hwnd = self.winId().__int__()
                ctypes.windll.user32.SetWindowPos(
                    hwnd, HWND_TOPMOST, 0, 0, 0, 0,
                    SWP_NOMOVE | SWP_NOSIZE | SWP_SHOWWINDOW
                )
            except Exception as e:
                print(f"Windows API call failed: {e}")
        
        QApplication.processEvents() # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å –ø–ª–∞–≤–Ω–æ
        self.text_list.setFocus()

    def close_with_animation(self, selected_value=None):
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è, –µ—Å–ª–∏ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è,
        # –Ω–æ –æ–±—ã—á–Ω–æ –¥–ª—è —Ç–∞–∫–∏—Ö pop-up –æ–∫–æ–Ω —ç—Ç–æ –∏–∑–ª–∏—à–Ω–µ.
        # –ü—Ä–æ—Å—Ç–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ:
        if self.opacity_anim.state() == QPropertyAnimation.Running:
            self.opacity_anim.stop()
        if self.geometry_anim.state() == QPropertyAnimation.Running:
            self.geometry_anim.stop()
        
        self.close() # –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç deleteLater –∏–∑-–∑–∞ WA_DeleteOnClose
        if selected_value is not None:
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ callback, —á—Ç–æ–±—ã –æ–∫–Ω–æ —É—Å–ø–µ–ª–æ –∏—Å—á–µ–∑–Ω—É—Ç—å
            # QTimer.singleShot(50, lambda: self.callback(selected_value))
            # –û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ –æ–∫–Ω–æ —É–¥–∞–ª—è–µ—Ç—Å—è, callback –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –¥–æ –µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            # –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–æ–π—á–∏–≤ –∫ —ç—Ç–æ–º—É.
            # WA_DeleteOnClose –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –µ—Å–ª–∏ callback –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ popup.
            # –õ—É—á—à–µ –≤—ã–∑–≤–∞—Ç—å callback –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç.
            self.callback(selected_value)


    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            if self.folder_stack:
                self.folder_stack.pop()
                self.update_text_list()
            else:
                self.close_with_animation() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π (–∏–ª–∏ –±–µ–∑, –µ—Å–ª–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ)
        elif event.key() == Qt.Key_Return or event.key() == Qt.Key_Enter:
            current_item = self.text_list.currentItem()
            if current_item:
                self.on_text_selected(current_item) # on_text_selected –≤—ã–∑–æ–≤–µ—Ç close_with_animation
        elif event.key() == Qt.Key_Up:
            current_row = self.text_list.currentRow()
            if current_row > 0:
                self.text_list.setCurrentRow(current_row - 1)
        elif event.key() == Qt.Key_Down:
            current_row = self.text_list.currentRow()
            if current_row < self.text_list.count() - 1:
                self.text_list.setCurrentRow(current_row + 1)
        else:
            super(TextSelectionPopup, self).keyPressEvent(event)
            
    def focusOutEvent(self, event):
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        if not self.isActiveWindow() and event.reason() != Qt.FocusReason.PopupFocusReason:
             print(f"FocusOutEvent, reason: {event.reason()}. Closing popup.")
             self.close_with_animation()
        super(TextSelectionPopup, self).focusOutEvent(event)
        
    def event(self, event):
        if event.type() == QEvent.WindowDeactivate:
            # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–µ–Ω –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
            print("WindowDeactivate event. Closing popup.")
            self.close_with_animation()
            return True # –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        return super(TextSelectionPopup, self).event(event)

    # show() –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º show_at_cursor()
    # def show(self):
    #     super(TextSelectionPopup, self).show()