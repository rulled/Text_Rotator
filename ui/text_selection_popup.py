import time
from PyQt5.QtWidgets import QDialog, QVBoxLayout, QListWidget, QApplication, QListWidgetItem
from PyQt5.QtCore import Qt, QPoint, QEvent
from PyQt5.QtGui import QCursor
from functools import partial

import sys
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Windows API –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–∫–Ω–∞ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –ø–ª–∞–Ω–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–∏—Å—Ç–µ–º—ã
if sys.platform == "win32":
    try:
        import ctypes
        from ctypes import wintypes
    except ImportError:
        ctypes = None
else:
    ctypes = None

class TextSelectionPopup(QDialog):
    def __init__(self, data, callback, parent=None):
        super(TextSelectionPopup, self).__init__(parent, 
            Qt.WindowType.FramelessWindowHint | 
            Qt.WindowType.Tool |
            Qt.WindowType.WindowStaysOnTopHint)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ "–≤—Å–µ–≥–¥–∞ –ø–æ–≤–µ—Ä—Ö"
        self.setWindowModality(Qt.WindowModal)  # –î–µ–ª–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–∫–Ω–∞
        self.setModal(True)  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å
        self.setAttribute(Qt.WA_DeleteOnClose)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        
        self.data = data
        self.callback = callback
        self.is_dark_theme = self.detect_dark_theme()
        self.folder_stack = []  # –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø–∞–ø–∫–∞–º
        self.init_ui()
        
    def detect_dark_theme(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ —É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞."""
        if hasattr(self.parent(), "is_dark_theme"):
            return self.parent().is_dark_theme
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å–∏—Å—Ç–µ–º–µ, –µ—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Windows
                if sys.platform == "win32":
                    import winreg
                    registry = winreg.ConnectRegistry(None, winreg.HKEY_CURRENT_USER)
                    reg_key = winreg.OpenKey(registry, r"Software\Microsoft\Windows\CurrentVersion\Themes\Personalize")
                    # AppsUseLightTheme = 0 –æ–∑–Ω–∞—á–∞–µ—Ç —Ç—ë–º–Ω—ã–π —Ä–µ–∂–∏–º
                    is_light_theme = int(winreg.QueryValueEx(reg_key, "AppsUseLightTheme")[0])
                    return is_light_theme == 0
                return False
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º—ã –¥–ª—è popup: {e}")
                return False
        
    def init_ui(self):
        self.setWindowTitle('Select Text')
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
        if self.is_dark_theme:
            # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
            self.setStyleSheet("""
                QWidget {
                    background-color: #1E1E1E;
                    border: 2px solid #3C3C3C;
                    border-radius: 5px;
                }
                QListWidget {
                    border: none;
                    font-family: 'Inter';
                    font-size: 14px;
                    font-weight: 400;
                    padding: 5px;
                    background-color: #2D2D2D;
                    color: #FFFFFF;
                }
                QListWidget::item {
                    padding: 8px;
                    border-bottom: 1px solid #3C3C3C;
                }
                QListWidget::item:selected {
                    background-color: #3C3C3C;
                    color: #FFFFFF;
                }
                QListWidget::item:hover {
                    background-color: #3C3C3C;
                }
                QListWidget::item[type="folder"] {
                    font-weight: 500;
                    color: #FFFFFF;
                    background-color: #2D2D2D;
                    border-bottom: 1px solid #3C3C3C;
                }
                QListWidget::item[type="folder"]:hover {
                    background-color: #3C3C3C;
                }
                QListWidget::item[type="folder"]:selected {
                    background-color: #3C3C3C;
                    color: #FFFFFF;
                }
                /* ScrollBar Styles - Dark */
                QScrollBar:vertical {
                    border: none;
                    background: #2D2D2D; /* Match ListWidget background */
                    width: 8px; /* Thinner scrollbar */
                    margin: 0px 0px 0px 0px;
                }
                QScrollBar::handle:vertical {
                    background: #555555; /* Dark gray handle */
                    min-height: 25px;
                    border-radius: 4px; /* Rounded handle */
                }
                QScrollBar::handle:vertical:hover {
                    background: #666666; /* Slightly lighter on hover */
                }
                QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                    border: none;
                    background: none;
                    height: 0px;
                    width: 0px;
                }
                QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical {
                    background: none;
                }
                QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
                    background: none;
                }
            """)
        else:
            # –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
            self.setStyleSheet("""
                QWidget {
                    background-color: white;
                    border: 2px solid #2196F3;
                    border-radius: 5px;
                }
                QListWidget {
                    border: none;
                    font-family: 'Inter';
                    font-size: 14px;
                    font-weight: 400;
                    padding: 5px;
                    background-color: white; /* Match scrollbar track */
                }
                QListWidget::item {
                    padding: 8px;
                    border-bottom: 1px solid #F0F0F0;
                }
                QListWidget::item:selected {
                    background-color: #E3F2FD;
                    color: #1976D2;
                }
                QListWidget::item:hover {
                    background-color: #F5F5F5;
                }
                QListWidget::item[type="folder"] {
                    font-weight: 500;
                    color: #1976D2;
                    background-color: #F8F9FA;
                    border-bottom: 1px solid #E9ECEF;
                }
                QListWidget::item[type="folder"]:hover {
                    background-color: #E9ECEF;
                }
                QListWidget::item[type="folder"]:selected {
                    background-color: #E3F2FD;
                    color: #1976D2;
                }
                 /* ScrollBar Styles - Light */
                 QScrollBar:vertical {
                     border: none;
                     background: white; /* Match ListWidget background */
                     width: 8px; /* Thinner scrollbar */
                     margin: 0px 0px 0px 0px;
                 }
                 QScrollBar::handle:vertical {
                     background: #CCCCCC; /* Light gray handle */
                     min-height: 25px;
                     border-radius: 4px; /* Rounded handle */
                 }
                 QScrollBar::handle:vertical:hover {
                     background: #BBBBBB; /* Slightly darker on hover */
                 }
                 QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                     border: none;
                     background: none;
                     height: 0px;
                     width: 0px;
                 }
                 QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical {
                     background: none;
                 }
                 QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
                     background: none;
                 }
            """)
        
        layout = QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(0)
        
        self.text_list = QListWidget()
        self.update_text_list()
        self.text_list.itemClicked.connect(self.on_text_selected)
        # Ensure scrollbar appears when needed
        self.text_list.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.text_list.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        layout.addWidget(self.text_list)
        
        # Adjust size after items are added
        self.adjust_popup_size()
        
    def update_text_list(self):
        self.text_list.clear()
        # –ï—Å–ª–∏ –º—ã –≤ –∫–æ—Ä–Ω–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫–∏
        if not self.folder_stack:
            for item in self.data:
                if isinstance(item, dict) and item.get('type') == 'folder':
                    folder_name = item.get('name', '–ë–µ–∑—ã–º—è–Ω–Ω–∞—è –ø–∞–ø–∫–∞')
                    list_item = QListWidgetItem(f"üìÅ {folder_name}")
                    list_item.setData(Qt.UserRole, None)
                    list_item.setData(Qt.UserRole + 1, 'folder')
                    # –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å
                    list_item.setData(Qt.UserRole + 2, item)
                    self.text_list.addItem(list_item)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            back_item = QListWidgetItem("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–∞–ø–æ–∫")
            back_item.setData(Qt.UserRole, None)
            back_item.setData(Qt.UserRole + 1, 'back')
            self.text_list.addItem(back_item)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏
            current_folder = self.folder_stack[-1]
            for item in current_folder.get('items', []):
                if isinstance(item, str):
                    preview = item.replace('\n', ' ')
                    preview = preview[:50] + '...' if len(preview) > 50 else preview
                    list_item = QListWidgetItem(preview)
                    list_item.setData(Qt.UserRole, item)
                    self.text_list.addItem(list_item)
        # Adjust size whenever the list content changes
        self.adjust_popup_size()
        
    def adjust_popup_size(self):
        """Dynamically adjusts popup height based on screen size and item count."""
        screen = QApplication.primaryScreen()
        screen_height = screen.size().height() if screen else 800
        min_percent = 0.15
        max_percent = 0.5
        min_height = int(screen_height * min_percent)
        max_height = int(screen_height * max_percent)

        # Estimate item height
        item_height = 35
        try:
            if self.text_list.count() > 0:
                hint = self.text_list.sizeHintForRow(0)
                if hint > 5:
                    item_height = hint
        except Exception:
            pass

        layout_margins = self.layout().contentsMargins()
        widget_border = 2 * 2
        list_padding = 5 * 2
        vertical_margins = layout_margins.top() + layout_margins.bottom() + widget_border + list_padding

        num_items = self.text_list.count()
        ideal_list_height = item_height * max(1, num_items)

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—ã—Å–æ—Ç–µ: –º–∏–Ω–∏–º—É–º 15% —ç–∫—Ä–∞–Ω–∞, –º–∞–∫—Å–∏–º—É–º 50% —ç–∫—Ä–∞–Ω–∞
        target_list_height = max(min_height, min(ideal_list_height, max_height))
        
        # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –ø–æ–º–µ—â–∞–µ—Ç—Å—è ‚Äî –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        self.text_list.setMinimumHeight(min_height)
        self.text_list.setMaximumHeight(max_height)
        self.text_list.setFixedHeight(target_list_height)

        extra_padding = 5
        total_height = self.text_list.height() + vertical_margins + extra_padding
        current_width = self.width() if self.width() > 100 else 400
        self.setFixedSize(current_width, total_height)
        print(f"Adjusted popup size: {num_items} items, List H={target_list_height}, Total H={total_height}, Screen H={screen_height}")


    def on_text_selected(self, item):
        item_type = item.data(Qt.UserRole + 1)
        if item_type == 'folder':
            # –ü–µ—Ä–µ—Ö–æ–¥ –≤–Ω—É—Ç—Ä—å –ø–∞–ø–∫–∏
            folder_obj = item.data(Qt.UserRole + 2)
            self.folder_stack.append(folder_obj)
            self.update_text_list()
        elif item_type == 'back':
            # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–∞–ø–æ–∫
            if self.folder_stack:
                self.folder_stack.pop()
                self.update_text_list()
        elif item.data(Qt.UserRole) is not None:
            # –í—ã–±—Ä–∞–Ω —Ç–µ–∫—Å—Ç
            self.close()
            time.sleep(0.3)
            self.callback(item.data(Qt.UserRole))
        
    def show_at_cursor(self):
        print("TextSelectionPopup.show_at_cursor() called")
        cursor_pos = QCursor.pos()
        print(f"Cursor position: {cursor_pos}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ
        screens = QApplication.screens()
        target_screen = None
        
        # –ù–∞—Ö–æ–¥–∏–º —ç–∫—Ä–∞–Ω, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫—É—Ä—Å–æ—Ä
        for screen in screens:
            geometry = screen.geometry()
            if geometry.contains(cursor_pos):
                target_screen = screen
                print(f"Found cursor on screen: {screen.name()} with geometry: {geometry}")
                break
                
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —ç–∫—Ä–∞–Ω (—á—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ), –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π
        if not target_screen:
            target_screen = QApplication.primaryScreen()
            print(f"Cursor not found on any screen, using primary: {target_screen.name()}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é —Ü–µ–ª–µ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        screen_geometry = target_screen.geometry()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–∞–∫, —á—Ç–æ–±—ã –æ–∫–Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–æ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —Å–º–µ—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–∫–Ω–æ –Ω–µ –ø–æ—è–≤–ª—è–ª–æ—Å—å –ø—Ä—è–º–æ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        offset_x, offset_y = 10, 10
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        x = cursor_pos.x() + offset_x
        y = cursor_pos.y() + offset_y
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –æ–∫–Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–æ –∑–∞ –ø—Ä–∞–≤—É—é –∏–ª–∏ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É —ç–∫—Ä–∞–Ω–∞
        if x + self.width() > screen_geometry.right():
            x = screen_geometry.right() - self.width() - offset_x
        
        if y + self.height() > screen_geometry.bottom():
            y = screen_geometry.bottom() - self.height() - offset_y
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –æ–∫–Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–æ –∑–∞ –ª–µ–≤—É—é –∏–ª–∏ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É —ç–∫—Ä–∞–Ω–∞
        if x < screen_geometry.left():
            x = screen_geometry.left() + offset_x
        
        if y < screen_geometry.top():
            y = screen_geometry.top() + offset_y
        
        print(f"Placing popup at: x={x}, y={y} on screen {target_screen.name()}")
        
        self.move(x, y)
        print("Window moved to position")
        self.show()
        print("Window shown")
        self.activateWindow()
        print("Window activated")
        self.raise_()
        print("Window raised")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º Windows API –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–∫–Ω–∞ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö
        if ctypes and sys.platform == "win32":
            try:
                # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è SetWindowPos
                HWND_TOPMOST = -1
                SWP_NOSIZE = 0x0001
                SWP_NOMOVE = 0x0002
                SWP_SHOWWINDOW = 0x0040
                
                # –ü–æ–ª—É—á–∞–µ–º —Ö—ç–Ω–¥–ª –æ–∫–Ω–∞
                hwnd = self.winId().__int__()
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
                ctypes.windll.user32.SetWindowPos(
                    hwnd, HWND_TOPMOST,
                    0, 0, 0, 0,
                    SWP_NOMOVE | SWP_NOSIZE | SWP_SHOWWINDOW
                )
                print("Windows API: SetWindowPos succeeded")
            except Exception as e:
                print(f"Windows API call failed: {e}")
        
        time.sleep(0.1)
        QApplication.processEvents()
        print("Events processed")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ —Å–ø–∏—Å–æ–∫
        self.text_list.setFocus()
        
    def show(self):
        print("TextSelectionPopup.show() called")
        super(TextSelectionPopup, self).show()
        print("TextSelectionPopup.show() completed")
        

        
    def keyPressEvent(self, event):
        if event.key() == Qt.Key.Key_Escape:
            if self.folder_stack:
                self.folder_stack.pop()
                self.update_text_list()
            else:
                self.close()
        elif event.key() == Qt.Key.Key_Return or event.key() == Qt.Key.Key_Enter:
            current_item = self.text_list.currentItem()
            if current_item:
                self.on_text_selected(current_item)
        elif event.key() == Qt.Key.Key_Up:
            current_row = self.text_list.currentRow()
            if current_row > 0:
                self.text_list.setCurrentRow(current_row - 1)
        elif event.key() == Qt.Key.Key_Down:
            current_row = self.text_list.currentRow()
            if current_row < self.text_list.count() - 1:
                self.text_list.setCurrentRow(current_row + 1)
        else:
            super(TextSelectionPopup, self).keyPressEvent(event)
            
    def focusOutEvent(self, event):
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        self.close()
        super(TextSelectionPopup, self).focusOutEvent(event)
        
    def changeEvent(self, event):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–∫–Ω–∞
        if event.type() == QEvent.ActivationChange:
            if not self.isActiveWindow():
                self.hide()  # –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        super(TextSelectionPopup, self).changeEvent(event)

    def event(self, event):
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏)
        if event.type() == QEvent.WindowDeactivate:
            self.close()
            return True
        return super(TextSelectionPopup, self).event(event) 